// <auto-generated />
using System;
using ChainStore.Infrastructure.InfrastructureData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChainStore.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20191102220303_Setup4")]
    partial class Setup4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpirationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReserveDaysCount")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryName")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("caa50ff0-f7de-4871-b401-670f447f1080"),
                            CategoryName = 0,
                            StoreId = new Guid("852b165a-82ae-49f5-ab6c-76a01ee8f467")
                        },
                        new
                        {
                            CategoryId = new Guid("c0e94f79-c622-4808-9448-dd4a96c5e55e"),
                            CategoryName = 1,
                            StoreId = new Guid("852b165a-82ae-49f5-ab6c-76a01ee8f467")
                        });
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = new Guid("e495424a-c58d-447d-93e1-4a6a97cfac2b"),
                            Balance = 0.0,
                            Name = "John"
                        },
                        new
                        {
                            ClientId = new Guid("e7fe3531-125c-4e20-9e1c-ed8768d92b2f"),
                            Balance = 0.0,
                            Name = "Wil"
                        });
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Mall", b =>
                {
                    b.Property<Guid>("MallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MallId");

                    b.ToTable("Malls");

                    b.HasData(
                        new
                        {
                            MallId = new Guid("85fb732a-9cd4-4658-8957-238841352ac9"),
                            Location = "10 Pandora",
                            Name = "Ocean Plaza"
                        });
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("6fd08034-fff9-4e7b-9eb8-47eced85f06f"),
                            CategoryId = new Guid("caa50ff0-f7de-4871-b401-670f447f1080"),
                            Name = "HP 450 G1",
                            Price = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("8ed94796-66be-4803-b6ab-d084ec9e6689"),
                            CategoryId = new Guid("caa50ff0-f7de-4871-b401-670f447f1080"),
                            Name = "HP 450 G2",
                            Price = 30000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("79151e83-fe64-41b9-9307-e54a8c337864"),
                            CategoryId = new Guid("caa50ff0-f7de-4871-b401-670f447f1080"),
                            Name = "HP 450 G3",
                            Price = 40000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("c4071097-fd27-4b9f-941e-c0eb17a70889"),
                            CategoryId = new Guid("caa50ff0-f7de-4871-b401-670f447f1080"),
                            Name = "HP 450 G4",
                            Price = 50000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("9fc54f44-f30b-47b9-b1fc-342967d0401e"),
                            CategoryId = new Guid("caa50ff0-f7de-4871-b401-670f447f1080"),
                            Name = "HP 850 G5",
                            Price = 60000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("e7715a79-775e-4c25-b23d-f3346098a8b5"),
                            CategoryId = new Guid("c0e94f79-c622-4808-9448-dd4a96c5e55e"),
                            Name = "LogTech G12",
                            Price = 1000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("9e661a11-5c10-4b08-a565-e5304f1dbfbc"),
                            CategoryId = new Guid("c0e94f79-c622-4808-9448-dd4a96c5e55e"),
                            Name = "X7",
                            Price = 2000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("b46f2de0-42d4-4c98-9125-f2dd2837ddf6"),
                            CategoryId = new Guid("caa50ff0-f7de-4871-b401-670f447f1080"),
                            Name = "HP 450 G1",
                            Price = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("d8caa76b-99f6-481b-ad3a-434d0b254394"),
                            CategoryId = new Guid("caa50ff0-f7de-4871-b401-670f447f1080"),
                            Name = "HP 450 G1",
                            Price = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("5045f31c-b82a-4a7f-af64-c32c3544b8ee"),
                            CategoryId = new Guid("caa50ff0-f7de-4871-b401-670f447f1080"),
                            Name = "HP 450 G1",
                            Price = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("1f9365e9-8903-4fdc-b566-f463871d7a65"),
                            CategoryId = new Guid("caa50ff0-f7de-4871-b401-670f447f1080"),
                            Name = "HP 450 G1",
                            Price = 20000.0,
                            ProductStatus = 0
                        });
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Purchase", b =>
                {
                    b.Property<Guid>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PurchaseId");

                    b.ToTable("Purchases");

                    b.HasData(
                        new
                        {
                            PurchaseId = new Guid("231f40f8-7072-42d5-be0f-194247e8051e"),
                            ClientId = new Guid("e495424a-c58d-447d-93e1-4a6a97cfac2b"),
                            CreationTime = new DateTimeOffset(new DateTime(2019, 11, 2, 22, 3, 3, 201, DateTimeKind.Unspecified).AddTicks(6174), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("6fd08034-fff9-4e7b-9eb8-47eced85f06f")
                        },
                        new
                        {
                            PurchaseId = new Guid("bdd5abd7-f86e-424d-8928-99537b4608e0"),
                            ClientId = new Guid("e495424a-c58d-447d-93e1-4a6a97cfac2b"),
                            CreationTime = new DateTimeOffset(new DateTime(2019, 11, 2, 22, 3, 3, 201, DateTimeKind.Unspecified).AddTicks(7860), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("8ed94796-66be-4803-b6ab-d084ec9e6689")
                        },
                        new
                        {
                            PurchaseId = new Guid("ea9ac509-6267-4da8-93f7-a2eb29914b1c"),
                            ClientId = new Guid("e495424a-c58d-447d-93e1-4a6a97cfac2b"),
                            CreationTime = new DateTimeOffset(new DateTime(2019, 11, 2, 22, 3, 3, 201, DateTimeKind.Unspecified).AddTicks(7911), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("79151e83-fe64-41b9-9307-e54a8c337864")
                        },
                        new
                        {
                            PurchaseId = new Guid("4018537e-6563-4a41-915d-b6b196ca3b54"),
                            ClientId = new Guid("e7fe3531-125c-4e20-9e1c-ed8768d92b2f"),
                            CreationTime = new DateTimeOffset(new DateTime(2019, 11, 2, 22, 3, 3, 201, DateTimeKind.Unspecified).AddTicks(7960), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("9fc54f44-f30b-47b9-b1fc-342967d0401e")
                        },
                        new
                        {
                            PurchaseId = new Guid("4850799d-9d20-4033-a7e3-0ed1ce1dfd7e"),
                            ClientId = new Guid("e7fe3531-125c-4e20-9e1c-ed8768d92b2f"),
                            CreationTime = new DateTimeOffset(new DateTime(2019, 11, 2, 22, 3, 3, 201, DateTimeKind.Unspecified).AddTicks(7963), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("e7715a79-775e-4c25-b23d-f3346098a8b5")
                        });
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Store", b =>
                {
                    b.Property<Guid>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Profit")
                        .HasColumnType("float");

                    b.HasKey("StoreId");

                    b.HasIndex("MallId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            StoreId = new Guid("852b165a-82ae-49f5-ab6c-76a01ee8f467"),
                            Location = "10 Pandora",
                            MallId = new Guid("85fb732a-9cd4-4658-8957-238841352ac9"),
                            Name = "Shields and Weapons",
                            Profit = 0.0
                        });
                });

            modelBuilder.Entity("ChainStore.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Category", b =>
                {
                    b.HasOne("ChainStore.Domain.DomainCore.Store", "Store")
                        .WithMany("Categories")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Product", b =>
                {
                    b.HasOne("ChainStore.Domain.DomainCore.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Store", b =>
                {
                    b.HasOne("ChainStore.Domain.DomainCore.Mall", "Mall")
                        .WithMany("Stores")
                        .HasForeignKey("MallId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ChainStore.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ChainStore.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChainStore.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ChainStore.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
