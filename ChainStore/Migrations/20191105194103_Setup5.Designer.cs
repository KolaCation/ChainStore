// <auto-generated />
using System;
using ChainStore.Infrastructure.InfrastructureData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChainStore.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20191105194103_Setup5")]
    partial class Setup5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpirationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReserveDaysCount")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryName")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("a4a749b5-a07c-4b8d-b8b5-a8aaeb16351f"),
                            CategoryName = 0,
                            StoreId = new Guid("1460aa22-4699-46aa-b55d-74041f33c7cb")
                        },
                        new
                        {
                            CategoryId = new Guid("317717ba-3501-43a5-82cd-26081e2c573b"),
                            CategoryName = 1,
                            StoreId = new Guid("1460aa22-4699-46aa-b55d-74041f33c7cb")
                        });
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = new Guid("1117b574-3ab4-44e3-95b8-c0302d78b430"),
                            Balance = 0.0,
                            Name = "John"
                        },
                        new
                        {
                            ClientId = new Guid("6f48f5b5-b8d0-41e4-8bf0-0a19a8fa8c59"),
                            Balance = 0.0,
                            Name = "Wil"
                        });
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Mall", b =>
                {
                    b.Property<Guid>("MallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MallId");

                    b.ToTable("Malls");

                    b.HasData(
                        new
                        {
                            MallId = new Guid("cd015038-e865-4215-8de3-2507c604b426"),
                            Location = "10 Pandora",
                            Name = "Ocean Plaza"
                        });
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("59b371b1-5cf2-4c62-b9e3-d0b239c4d947"),
                            CategoryId = new Guid("a4a749b5-a07c-4b8d-b8b5-a8aaeb16351f"),
                            Name = "HP 450 G1",
                            Price = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("36a78229-9a1d-46d8-8687-2359fbe024c3"),
                            CategoryId = new Guid("a4a749b5-a07c-4b8d-b8b5-a8aaeb16351f"),
                            Name = "HP 450 G2",
                            Price = 30000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("462494dd-169b-4450-bcf9-7e60c6217f81"),
                            CategoryId = new Guid("a4a749b5-a07c-4b8d-b8b5-a8aaeb16351f"),
                            Name = "HP 450 G3",
                            Price = 40000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("7cf32a99-9947-424f-b985-fadbf6372d4d"),
                            CategoryId = new Guid("a4a749b5-a07c-4b8d-b8b5-a8aaeb16351f"),
                            Name = "HP 450 G4",
                            Price = 50000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("5169aa48-ecfa-4feb-8a03-a31d231f2cb4"),
                            CategoryId = new Guid("a4a749b5-a07c-4b8d-b8b5-a8aaeb16351f"),
                            Name = "HP 850 G5",
                            Price = 60000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("1c58fe85-1ee4-4680-95fb-f50d9cffaec4"),
                            CategoryId = new Guid("317717ba-3501-43a5-82cd-26081e2c573b"),
                            Name = "LogTech G12",
                            Price = 1000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("5921392b-4531-4a0a-aa2f-2bb9d28f2eab"),
                            CategoryId = new Guid("317717ba-3501-43a5-82cd-26081e2c573b"),
                            Name = "X7",
                            Price = 2000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("14972c50-a214-4f7a-8a75-ff8f122696cd"),
                            CategoryId = new Guid("a4a749b5-a07c-4b8d-b8b5-a8aaeb16351f"),
                            Name = "HP 450 G1",
                            Price = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("a39f3446-3e0c-4f58-b0ca-7663d865032c"),
                            CategoryId = new Guid("a4a749b5-a07c-4b8d-b8b5-a8aaeb16351f"),
                            Name = "HP 450 G1",
                            Price = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("5fc5a529-d998-476b-a461-819cb4a99f8a"),
                            CategoryId = new Guid("a4a749b5-a07c-4b8d-b8b5-a8aaeb16351f"),
                            Name = "HP 450 G1",
                            Price = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("2a0ffa89-a6a6-4f45-af0e-ad2b23f2da9a"),
                            CategoryId = new Guid("a4a749b5-a07c-4b8d-b8b5-a8aaeb16351f"),
                            Name = "HP 450 G1",
                            Price = 20000.0,
                            ProductStatus = 0
                        });
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Purchase", b =>
                {
                    b.Property<Guid>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PurchaseId");

                    b.ToTable("Purchases");

                    b.HasData(
                        new
                        {
                            PurchaseId = new Guid("3177ae0d-91d4-4d97-aa86-8795694e27e2"),
                            ClientId = new Guid("1117b574-3ab4-44e3-95b8-c0302d78b430"),
                            CreationTime = new DateTimeOffset(new DateTime(2019, 11, 5, 19, 41, 3, 66, DateTimeKind.Unspecified).AddTicks(9721), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("59b371b1-5cf2-4c62-b9e3-d0b239c4d947")
                        },
                        new
                        {
                            PurchaseId = new Guid("844a575b-fc1d-4b1e-a80b-9cf9ddd429b0"),
                            ClientId = new Guid("1117b574-3ab4-44e3-95b8-c0302d78b430"),
                            CreationTime = new DateTimeOffset(new DateTime(2019, 11, 5, 19, 41, 3, 67, DateTimeKind.Unspecified).AddTicks(952), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("36a78229-9a1d-46d8-8687-2359fbe024c3")
                        },
                        new
                        {
                            PurchaseId = new Guid("4ef041e7-358b-40f9-88f2-507b07691143"),
                            ClientId = new Guid("1117b574-3ab4-44e3-95b8-c0302d78b430"),
                            CreationTime = new DateTimeOffset(new DateTime(2019, 11, 5, 19, 41, 3, 67, DateTimeKind.Unspecified).AddTicks(1143), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("462494dd-169b-4450-bcf9-7e60c6217f81")
                        },
                        new
                        {
                            PurchaseId = new Guid("7a1aa988-b440-4f7e-b824-c135b378e09b"),
                            ClientId = new Guid("6f48f5b5-b8d0-41e4-8bf0-0a19a8fa8c59"),
                            CreationTime = new DateTimeOffset(new DateTime(2019, 11, 5, 19, 41, 3, 67, DateTimeKind.Unspecified).AddTicks(1172), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("5169aa48-ecfa-4feb-8a03-a31d231f2cb4")
                        },
                        new
                        {
                            PurchaseId = new Guid("096e06bc-5312-4e87-bb12-397802b62897"),
                            ClientId = new Guid("6f48f5b5-b8d0-41e4-8bf0-0a19a8fa8c59"),
                            CreationTime = new DateTimeOffset(new DateTime(2019, 11, 5, 19, 41, 3, 67, DateTimeKind.Unspecified).AddTicks(1174), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = new Guid("1c58fe85-1ee4-4680-95fb-f50d9cffaec4")
                        });
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Store", b =>
                {
                    b.Property<Guid>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Profit")
                        .HasColumnType("float");

                    b.HasKey("StoreId");

                    b.HasIndex("MallId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            StoreId = new Guid("1460aa22-4699-46aa-b55d-74041f33c7cb"),
                            Location = "10 Pandora",
                            MallId = new Guid("cd015038-e865-4215-8de3-2507c604b426"),
                            Name = "Shields and Weapons",
                            Profit = 0.0
                        });
                });

            modelBuilder.Entity("ChainStore.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Category", b =>
                {
                    b.HasOne("ChainStore.Domain.DomainCore.Store", "Store")
                        .WithMany("Categories")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Product", b =>
                {
                    b.HasOne("ChainStore.Domain.DomainCore.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Store", b =>
                {
                    b.HasOne("ChainStore.Domain.DomainCore.Mall", "Mall")
                        .WithMany("Stores")
                        .HasForeignKey("MallId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ChainStore.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ChainStore.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChainStore.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ChainStore.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
