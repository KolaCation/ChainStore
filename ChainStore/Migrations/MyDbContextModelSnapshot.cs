// <auto-generated />
using System;
using ChainStore.Infrastructure.InfrastructureData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChainStore.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpirationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReserveDaysCount")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryName")
                        .HasColumnType("int");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("4070e7cf-2031-4cdf-b717-4a8a1e920211"),
                            CategoryName = 0,
                            StoreId = new Guid("59389afe-fadc-4ff9-8444-2a8229493f2f")
                        },
                        new
                        {
                            CategoryId = new Guid("48efc935-75d1-4ea2-acc6-9b714d840e6b"),
                            CategoryName = 1,
                            StoreId = new Guid("59389afe-fadc-4ff9-8444-2a8229493f2f")
                        });
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Client");
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Mall", b =>
                {
                    b.Property<Guid>("MallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MallId");

                    b.ToTable("Malls");

                    b.HasData(
                        new
                        {
                            MallId = new Guid("93e76def-bc62-4d98-b8df-dd0db1bde1b1"),
                            Location = "10 Pandora",
                            Name = "Ocean Plaza"
                        });
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("d057fe51-7e85-4c0b-b93b-1b6e2486c0da"),
                            CategoryId = new Guid("4070e7cf-2031-4cdf-b717-4a8a1e920211"),
                            Name = "HP 450 G1",
                            Price = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("7472f9d4-2690-4609-9805-aeb8c8e2fc95"),
                            CategoryId = new Guid("4070e7cf-2031-4cdf-b717-4a8a1e920211"),
                            Name = "HP 450 G2",
                            Price = 30000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("0a41808e-9372-4a3d-b356-b2ebd84b0cac"),
                            CategoryId = new Guid("4070e7cf-2031-4cdf-b717-4a8a1e920211"),
                            Name = "HP 450 G3",
                            Price = 40000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("6bf0fa12-8203-4ee2-9fa1-077249160217"),
                            CategoryId = new Guid("4070e7cf-2031-4cdf-b717-4a8a1e920211"),
                            Name = "HP 450 G4",
                            Price = 50000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("f28e6661-4660-435a-9844-f48876eb1f6a"),
                            CategoryId = new Guid("4070e7cf-2031-4cdf-b717-4a8a1e920211"),
                            Name = "HP 850 G5",
                            Price = 60000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("f375c517-bae8-4d9d-b078-0a59869772b2"),
                            CategoryId = new Guid("48efc935-75d1-4ea2-acc6-9b714d840e6b"),
                            Name = "LogTech G12",
                            Price = 1000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("7d9b492a-de0a-4271-a980-53876b3bcef7"),
                            CategoryId = new Guid("48efc935-75d1-4ea2-acc6-9b714d840e6b"),
                            Name = "X7",
                            Price = 2000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("f8aa8864-3ab4-4eb1-8b11-f314630e5095"),
                            CategoryId = new Guid("4070e7cf-2031-4cdf-b717-4a8a1e920211"),
                            Name = "HP 450 G1",
                            Price = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("4e826afe-2a39-44bf-8d23-2c1937683ee8"),
                            CategoryId = new Guid("4070e7cf-2031-4cdf-b717-4a8a1e920211"),
                            Name = "HP 450 G1",
                            Price = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("02050091-d396-4141-ae44-92420824508b"),
                            CategoryId = new Guid("4070e7cf-2031-4cdf-b717-4a8a1e920211"),
                            Name = "HP 450 G1",
                            Price = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductId = new Guid("18220fe0-8c91-4fdf-a34e-6614dd80037d"),
                            CategoryId = new Guid("4070e7cf-2031-4cdf-b717-4a8a1e920211"),
                            Name = "HP 450 G1",
                            Price = 20000.0,
                            ProductStatus = 0
                        });
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Purchase", b =>
                {
                    b.Property<Guid>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PurchaseId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Store", b =>
                {
                    b.Property<Guid>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Profit")
                        .HasColumnType("float");

                    b.HasKey("StoreId");

                    b.HasIndex("MallId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            StoreId = new Guid("59389afe-fadc-4ff9-8444-2a8229493f2f"),
                            Location = "10 Pandora",
                            MallId = new Guid("93e76def-bc62-4d98-b8df-dd0db1bde1b1"),
                            Name = "Shields and Weapons",
                            Profit = 0.0
                        });
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.ReliableClient", b =>
                {
                    b.HasBaseType("ChainStore.Domain.DomainCore.Client");

                    b.Property<double>("CashBack")
                        .HasColumnType("float");

                    b.Property<int>("CashBackPercent")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ReliableClient");
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.VipClient", b =>
                {
                    b.HasBaseType("ChainStore.Domain.DomainCore.ReliableClient");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("VipClient");
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Category", b =>
                {
                    b.HasOne("ChainStore.Domain.DomainCore.Store", "Store")
                        .WithMany("Categories")
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Product", b =>
                {
                    b.HasOne("ChainStore.Domain.DomainCore.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChainStore.Domain.DomainCore.Store", b =>
                {
                    b.HasOne("ChainStore.Domain.DomainCore.Mall", "Mall")
                        .WithMany("Stores")
                        .HasForeignKey("MallId");
                });
#pragma warning restore 612, 618
        }
    }
}
