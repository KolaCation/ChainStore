// <auto-generated />
using System;
using ChainStore.DataAccessLayerImpl;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChainStore.DataAccessLayerImpl.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ClientDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.BookDbModel", b =>
                {
                    b.Property<Guid>("BookDbModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpirationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReserveDaysCount")
                        .HasColumnType("int");

                    b.HasKey("BookDbModelId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.CategoryDbModel", b =>
                {
                    b.Property<Guid>("CategoryDbModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StoreDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryDbModelId");

                    b.HasIndex("StoreDbModelId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryDbModelId = new Guid("bdc0bc96-a4df-40ea-aeb9-199e633c31e0"),
                            Name = "Laptop"
                        },
                        new
                        {
                            CategoryDbModelId = new Guid("0b7c1794-ddd8-4fd6-a5a6-68ac9d13f618"),
                            Name = "Mouse"
                        },
                        new
                        {
                            CategoryDbModelId = new Guid("59752d04-3a1e-4833-9eb9-f0d274da76b0"),
                            Name = "USB"
                        });
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.ClientDbModel", b =>
                {
                    b.Property<Guid>("ClientDbModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientDbModelId");

                    b.ToTable("Clients");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ClientDbModel");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.MallDbModel", b =>
                {
                    b.Property<Guid>("MallDbModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MallDbModelId");

                    b.ToTable("Malls");

                    b.HasData(
                        new
                        {
                            MallDbModelId = new Guid("57817fa9-88dc-4c4e-abb2-26e0b1d2ed9a"),
                            Location = "10 Pandora Street",
                            Name = "Ocean Plaza"
                        });
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.ProductDbModel", b =>
                {
                    b.Property<Guid>("ProductDbModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceInUAH")
                        .HasColumnType("float");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int");

                    b.HasKey("ProductDbModelId");

                    b.HasIndex("CategoryDbModelId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductDbModelId = new Guid("c0a047de-d55c-4199-aa7e-68f4d6c4073a"),
                            CategoryDbModelId = new Guid("bdc0bc96-a4df-40ea-aeb9-199e633c31e0"),
                            Name = "HP 450 G1",
                            PriceInUAH = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("b3cb63d7-83ce-4de5-a137-c98e8f3feaed"),
                            CategoryDbModelId = new Guid("bdc0bc96-a4df-40ea-aeb9-199e633c31e0"),
                            Name = "HP 450 G2",
                            PriceInUAH = 30000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("96fbdc34-e7df-408b-8c70-9bd99c3d855d"),
                            CategoryDbModelId = new Guid("bdc0bc96-a4df-40ea-aeb9-199e633c31e0"),
                            Name = "HP 450 G3",
                            PriceInUAH = 40000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("8bee4fd0-8716-4f52-8069-2a1fd66978a1"),
                            CategoryDbModelId = new Guid("bdc0bc96-a4df-40ea-aeb9-199e633c31e0"),
                            Name = "HP 450 G4",
                            PriceInUAH = 50000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("3dfa0460-37f0-4892-9715-770e596391eb"),
                            CategoryDbModelId = new Guid("bdc0bc96-a4df-40ea-aeb9-199e633c31e0"),
                            Name = "HP 850 G5",
                            PriceInUAH = 60000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("bd3686c9-13a8-47a6-a33c-9d8794eda51b"),
                            CategoryDbModelId = new Guid("0b7c1794-ddd8-4fd6-a5a6-68ac9d13f618"),
                            Name = "LogTech G12",
                            PriceInUAH = 1000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("10868013-4ed5-4a89-8b00-7c662e44cfd7"),
                            CategoryDbModelId = new Guid("0b7c1794-ddd8-4fd6-a5a6-68ac9d13f618"),
                            Name = "X7",
                            PriceInUAH = 2000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("b29787ec-7169-4d27-83aa-238388a582a7"),
                            CategoryDbModelId = new Guid("bdc0bc96-a4df-40ea-aeb9-199e633c31e0"),
                            Name = "HP 450 G1",
                            PriceInUAH = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("485e099d-10bb-406f-8394-0333d22421d1"),
                            CategoryDbModelId = new Guid("bdc0bc96-a4df-40ea-aeb9-199e633c31e0"),
                            Name = "HP 450 G1",
                            PriceInUAH = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("0667a62e-5b5c-4d92-b569-fa9a1e4f4077"),
                            CategoryDbModelId = new Guid("bdc0bc96-a4df-40ea-aeb9-199e633c31e0"),
                            Name = "HP 450 G1",
                            PriceInUAH = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("e05d35c8-f8b7-48c5-9e13-2d4b59b2d73e"),
                            CategoryDbModelId = new Guid("bdc0bc96-a4df-40ea-aeb9-199e633c31e0"),
                            Name = "HP 450 G1",
                            PriceInUAH = 20000.0,
                            ProductStatus = 0
                        });
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.PurchaseDbModel", b =>
                {
                    b.Property<Guid>("PurchaseDbModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PurchaseDbModelId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreCategoryDbModel", b =>
                {
                    b.Property<Guid>("StoreDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StoreDbModelId", "CategoryDbModelId");

                    b.HasIndex("CategoryDbModelId");

                    b.ToTable("StoreCategoryRelation");

                    b.HasData(
                        new
                        {
                            StoreDbModelId = new Guid("98edc982-8f27-4bbc-b531-2a0e37a6459a"),
                            CategoryDbModelId = new Guid("bdc0bc96-a4df-40ea-aeb9-199e633c31e0")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("98edc982-8f27-4bbc-b531-2a0e37a6459a"),
                            CategoryDbModelId = new Guid("0b7c1794-ddd8-4fd6-a5a6-68ac9d13f618")
                        });
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreDbModel", b =>
                {
                    b.Property<Guid>("StoreDbModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MallDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Profit")
                        .HasColumnType("float");

                    b.HasKey("StoreDbModelId");

                    b.HasIndex("MallDbModelId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            StoreDbModelId = new Guid("98edc982-8f27-4bbc-b531-2a0e37a6459a"),
                            Location = "10 Pandora Street",
                            MallDbModelId = new Guid("57817fa9-88dc-4c4e-abb2-26e0b1d2ed9a"),
                            Name = "Shields and Weapons",
                            Profit = 0.0
                        });
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreProductDbModel", b =>
                {
                    b.Property<Guid>("StoreDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StoreDbModelId", "ProductDbModelId");

                    b.HasIndex("ProductDbModelId");

                    b.ToTable("StoreProductRelation");

                    b.HasData(
                        new
                        {
                            StoreDbModelId = new Guid("98edc982-8f27-4bbc-b531-2a0e37a6459a"),
                            ProductDbModelId = new Guid("c0a047de-d55c-4199-aa7e-68f4d6c4073a")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("98edc982-8f27-4bbc-b531-2a0e37a6459a"),
                            ProductDbModelId = new Guid("b29787ec-7169-4d27-83aa-238388a582a7")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("98edc982-8f27-4bbc-b531-2a0e37a6459a"),
                            ProductDbModelId = new Guid("485e099d-10bb-406f-8394-0333d22421d1")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("98edc982-8f27-4bbc-b531-2a0e37a6459a"),
                            ProductDbModelId = new Guid("0667a62e-5b5c-4d92-b569-fa9a1e4f4077")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("98edc982-8f27-4bbc-b531-2a0e37a6459a"),
                            ProductDbModelId = new Guid("e05d35c8-f8b7-48c5-9e13-2d4b59b2d73e")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("98edc982-8f27-4bbc-b531-2a0e37a6459a"),
                            ProductDbModelId = new Guid("b3cb63d7-83ce-4de5-a137-c98e8f3feaed")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("98edc982-8f27-4bbc-b531-2a0e37a6459a"),
                            ProductDbModelId = new Guid("96fbdc34-e7df-408b-8c70-9bd99c3d855d")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("98edc982-8f27-4bbc-b531-2a0e37a6459a"),
                            ProductDbModelId = new Guid("8bee4fd0-8716-4f52-8069-2a1fd66978a1")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("98edc982-8f27-4bbc-b531-2a0e37a6459a"),
                            ProductDbModelId = new Guid("3dfa0460-37f0-4892-9715-770e596391eb")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("98edc982-8f27-4bbc-b531-2a0e37a6459a"),
                            ProductDbModelId = new Guid("bd3686c9-13a8-47a6-a33c-9d8794eda51b")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("98edc982-8f27-4bbc-b531-2a0e37a6459a"),
                            ProductDbModelId = new Guid("10868013-4ed5-4a89-8b00-7c662e44cfd7")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.ReliableClientDbModel", b =>
                {
                    b.HasBaseType("ChainStore.DataAccessLayerImpl.DbModels.ClientDbModel");

                    b.Property<double>("CashBack")
                        .HasColumnType("float");

                    b.Property<int>("CashBackPercent")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ReliableClientDbModel");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.VipClientDbModel", b =>
                {
                    b.HasBaseType("ChainStore.DataAccessLayerImpl.DbModels.ReliableClientDbModel");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<double>("Points")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("VipClientDbModel");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.CategoryDbModel", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.StoreDbModel", null)
                        .WithMany("CategoryDbModels")
                        .HasForeignKey("StoreDbModelId");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.ProductDbModel", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.CategoryDbModel", "CategoryDbModel")
                        .WithMany("ProductDbModels")
                        .HasForeignKey("CategoryDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreCategoryDbModel", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.CategoryDbModel", "CategoryDbModel")
                        .WithMany("StoreCategoryRelation")
                        .HasForeignKey("CategoryDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.StoreDbModel", "StoreDbModel")
                        .WithMany("StoreCategoryRelation")
                        .HasForeignKey("StoreDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreDbModel", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.MallDbModel", "MallDbModel")
                        .WithMany("StoreDbModels")
                        .HasForeignKey("MallDbModelId");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreProductDbModel", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.ProductDbModel", "ProductDbModel")
                        .WithMany("StoreProductRelation")
                        .HasForeignKey("ProductDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.StoreDbModel", "StoreDbModel")
                        .WithMany("StoreProductRelation")
                        .HasForeignKey("StoreDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChainStore.DataAccessLayerImpl.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
