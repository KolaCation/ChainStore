// <auto-generated />
using System;
using ChainStore.DataAccessLayerImpl;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChainStore.DataAccessLayerImpl.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20201013020529_RenameRelationKeys")]
    partial class RenameRelationKeys
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ClientDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.BookDbModel", b =>
                {
                    b.Property<Guid>("BookDbModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpirationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReserveDaysCount")
                        .HasColumnType("int");

                    b.HasKey("BookDbModelId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.CategoryDbModel", b =>
                {
                    b.Property<Guid>("CategoryDbModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StoreDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryDbModelId");

                    b.HasIndex("StoreDbModelId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryDbModelId = new Guid("e376db72-02b7-4e86-b0a4-460752468267"),
                            Name = "Laptop"
                        },
                        new
                        {
                            CategoryDbModelId = new Guid("de0e229b-2a02-41da-88b3-a7bd44309566"),
                            Name = "Mouse"
                        });
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.ClientDbModel", b =>
                {
                    b.Property<Guid>("ClientDbModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientDbModelId");

                    b.ToTable("Clients");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ClientDbModel");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.MallDbModel", b =>
                {
                    b.Property<Guid>("MallDbModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MallDbModelId");

                    b.ToTable("Malls");

                    b.HasData(
                        new
                        {
                            MallDbModelId = new Guid("93db65aa-ba5e-43f0-ac25-3b145e8ca31b"),
                            Location = "10 Pandora Street",
                            Name = "Ocean Plaza"
                        });
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.ProductDbModel", b =>
                {
                    b.Property<Guid>("ProductDbModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceInUAH")
                        .HasColumnType("float");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int");

                    b.HasKey("ProductDbModelId");

                    b.HasIndex("CategoryDbModelId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductDbModelId = new Guid("d886020e-c115-4b51-a3b0-c11ca0a80d7d"),
                            CategoryDbModelId = new Guid("e376db72-02b7-4e86-b0a4-460752468267"),
                            Name = "HP 450 G1",
                            PriceInUAH = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("fe4781af-4bd6-4e83-8ea7-8f4c3c79848a"),
                            CategoryDbModelId = new Guid("e376db72-02b7-4e86-b0a4-460752468267"),
                            Name = "HP 450 G2",
                            PriceInUAH = 30000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("1215cddc-4da2-4530-a653-e4634009bb1c"),
                            CategoryDbModelId = new Guid("e376db72-02b7-4e86-b0a4-460752468267"),
                            Name = "HP 450 G3",
                            PriceInUAH = 40000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("0732ea14-6e25-442d-a3d3-fed4f214a12c"),
                            CategoryDbModelId = new Guid("e376db72-02b7-4e86-b0a4-460752468267"),
                            Name = "HP 450 G4",
                            PriceInUAH = 50000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("f549a7b1-9746-44af-a4fa-0a1e4649796b"),
                            CategoryDbModelId = new Guid("e376db72-02b7-4e86-b0a4-460752468267"),
                            Name = "HP 850 G5",
                            PriceInUAH = 60000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("22d990e9-b177-49ba-ad83-214a78cfea6a"),
                            CategoryDbModelId = new Guid("de0e229b-2a02-41da-88b3-a7bd44309566"),
                            Name = "LogTech G12",
                            PriceInUAH = 1000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("fa10a6a8-364b-4d0a-91a7-15d752f557c0"),
                            CategoryDbModelId = new Guid("de0e229b-2a02-41da-88b3-a7bd44309566"),
                            Name = "X7",
                            PriceInUAH = 2000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("7b366602-b480-4c30-a0ef-c17013b4b47c"),
                            CategoryDbModelId = new Guid("e376db72-02b7-4e86-b0a4-460752468267"),
                            Name = "HP 450 G1",
                            PriceInUAH = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("5cfffeb8-538b-41cf-963f-f49c4ef97e95"),
                            CategoryDbModelId = new Guid("e376db72-02b7-4e86-b0a4-460752468267"),
                            Name = "HP 450 G1",
                            PriceInUAH = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("e76ad929-058a-4c0a-b839-305951890d77"),
                            CategoryDbModelId = new Guid("e376db72-02b7-4e86-b0a4-460752468267"),
                            Name = "HP 450 G1",
                            PriceInUAH = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            ProductDbModelId = new Guid("c874bb95-433c-4ce7-a541-953f5a2db3fe"),
                            CategoryDbModelId = new Guid("e376db72-02b7-4e86-b0a4-460752468267"),
                            Name = "HP 450 G1",
                            PriceInUAH = 20000.0,
                            ProductStatus = 0
                        });
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.PurchaseDbModel", b =>
                {
                    b.Property<Guid>("PurchaseDbModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PurchaseDbModelId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreCategoryDbModel", b =>
                {
                    b.Property<Guid>("StoreDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StoreDbModelId", "CategoryDbModelId");

                    b.HasIndex("CategoryDbModelId");

                    b.ToTable("StoreCategoryRelation");

                    b.HasData(
                        new
                        {
                            StoreDbModelId = new Guid("a28b221a-98d4-4069-b888-8e423651c64b"),
                            CategoryDbModelId = new Guid("e376db72-02b7-4e86-b0a4-460752468267")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("a28b221a-98d4-4069-b888-8e423651c64b"),
                            CategoryDbModelId = new Guid("de0e229b-2a02-41da-88b3-a7bd44309566")
                        });
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreDbModel", b =>
                {
                    b.Property<Guid>("StoreDbModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MallDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Profit")
                        .HasColumnType("float");

                    b.HasKey("StoreDbModelId");

                    b.HasIndex("MallDbModelId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            StoreDbModelId = new Guid("a28b221a-98d4-4069-b888-8e423651c64b"),
                            Location = "10 Pandora Street",
                            MallDbModelId = new Guid("93db65aa-ba5e-43f0-ac25-3b145e8ca31b"),
                            Name = "Shields and Weapons",
                            Profit = 0.0
                        });
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreProductDbModel", b =>
                {
                    b.Property<Guid>("StoreDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StoreDbModelId", "ProductDbModelId");

                    b.HasIndex("ProductDbModelId");

                    b.ToTable("StoreProductRelation");

                    b.HasData(
                        new
                        {
                            StoreDbModelId = new Guid("a28b221a-98d4-4069-b888-8e423651c64b"),
                            ProductDbModelId = new Guid("d886020e-c115-4b51-a3b0-c11ca0a80d7d")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("a28b221a-98d4-4069-b888-8e423651c64b"),
                            ProductDbModelId = new Guid("7b366602-b480-4c30-a0ef-c17013b4b47c")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("a28b221a-98d4-4069-b888-8e423651c64b"),
                            ProductDbModelId = new Guid("5cfffeb8-538b-41cf-963f-f49c4ef97e95")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("a28b221a-98d4-4069-b888-8e423651c64b"),
                            ProductDbModelId = new Guid("e76ad929-058a-4c0a-b839-305951890d77")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("a28b221a-98d4-4069-b888-8e423651c64b"),
                            ProductDbModelId = new Guid("c874bb95-433c-4ce7-a541-953f5a2db3fe")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("a28b221a-98d4-4069-b888-8e423651c64b"),
                            ProductDbModelId = new Guid("fe4781af-4bd6-4e83-8ea7-8f4c3c79848a")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("a28b221a-98d4-4069-b888-8e423651c64b"),
                            ProductDbModelId = new Guid("1215cddc-4da2-4530-a653-e4634009bb1c")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("a28b221a-98d4-4069-b888-8e423651c64b"),
                            ProductDbModelId = new Guid("0732ea14-6e25-442d-a3d3-fed4f214a12c")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("a28b221a-98d4-4069-b888-8e423651c64b"),
                            ProductDbModelId = new Guid("f549a7b1-9746-44af-a4fa-0a1e4649796b")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("a28b221a-98d4-4069-b888-8e423651c64b"),
                            ProductDbModelId = new Guid("22d990e9-b177-49ba-ad83-214a78cfea6a")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("a28b221a-98d4-4069-b888-8e423651c64b"),
                            ProductDbModelId = new Guid("fa10a6a8-364b-4d0a-91a7-15d752f557c0")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.ReliableClientDbModel", b =>
                {
                    b.HasBaseType("ChainStore.DataAccessLayerImpl.DbModels.ClientDbModel");

                    b.Property<double>("CashBack")
                        .HasColumnType("float");

                    b.Property<int>("CashBackPercent")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ReliableClientDbModel");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.VipClientDbModel", b =>
                {
                    b.HasBaseType("ChainStore.DataAccessLayerImpl.DbModels.ReliableClientDbModel");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<double>("Points")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("VipClientDbModel");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.CategoryDbModel", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.StoreDbModel", null)
                        .WithMany("CategoryDbModels")
                        .HasForeignKey("StoreDbModelId");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.ProductDbModel", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.CategoryDbModel", "CategoryDbModel")
                        .WithMany("ProductDbModels")
                        .HasForeignKey("CategoryDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreCategoryDbModel", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.CategoryDbModel", "CategoryDbModel")
                        .WithMany("StoreCategoryRelation")
                        .HasForeignKey("CategoryDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.StoreDbModel", "StoreDbModel")
                        .WithMany("StoreCategoryRelation")
                        .HasForeignKey("StoreDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreDbModel", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.MallDbModel", "MallDbModel")
                        .WithMany("StoreDbModels")
                        .HasForeignKey("MallDbModelId");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreProductDbModel", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.ProductDbModel", "ProductDbModel")
                        .WithMany("StoreProductRelation")
                        .HasForeignKey("ProductDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.StoreDbModel", "StoreDbModel")
                        .WithMany("StoreProductRelation")
                        .HasForeignKey("StoreDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChainStore.DataAccessLayerImpl.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
