// <auto-generated />
using System;
using ChainStore.DataAccessLayerImpl;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChainStore.DataAccessLayerImpl.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20201025002232_IdRework")]
    partial class IdRework
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ClientDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.BookDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpirationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReserveDaysCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.CategoryDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StoreDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StoreDbModelId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abe915e8-e84c-46cc-83a7-ba5dee415768"),
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = new Guid("edc3c4d0-b53f-4538-ae3e-edb18ee22430"),
                            Name = "Mouse"
                        },
                        new
                        {
                            Id = new Guid("3151b166-837b-4c04-b8d8-7d478a4b6b9b"),
                            Name = "USB"
                        });
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.ClientDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ClientDbModel");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.MallDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Malls");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c1d5b26-d398-44d0-87fa-838dc45028f1"),
                            Location = "10 Pandora Street",
                            Name = "Ocean Plaza"
                        });
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.ProductDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceInUAH")
                        .HasColumnType("float");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57042385-800e-42ff-b197-faac94f79a6b"),
                            CategoryId = new Guid("abe915e8-e84c-46cc-83a7-ba5dee415768"),
                            Name = "HP 450 G1",
                            PriceInUAH = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            Id = new Guid("162121d0-2ca7-429f-92ea-0cbc814f1c08"),
                            CategoryId = new Guid("abe915e8-e84c-46cc-83a7-ba5dee415768"),
                            Name = "HP 450 G2",
                            PriceInUAH = 30000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            Id = new Guid("512f3ad8-b3b2-4d0a-8c2c-53944af85656"),
                            CategoryId = new Guid("abe915e8-e84c-46cc-83a7-ba5dee415768"),
                            Name = "HP 450 G3",
                            PriceInUAH = 40000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            Id = new Guid("45a2a0ab-5e24-47ce-8bb1-c0d1ca804bc6"),
                            CategoryId = new Guid("abe915e8-e84c-46cc-83a7-ba5dee415768"),
                            Name = "HP 450 G4",
                            PriceInUAH = 50000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            Id = new Guid("fae7ed00-ca83-4b2c-a236-f992a8a13191"),
                            CategoryId = new Guid("abe915e8-e84c-46cc-83a7-ba5dee415768"),
                            Name = "HP 850 G5",
                            PriceInUAH = 60000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            Id = new Guid("042616f7-1f8b-43a0-b322-96559c2980fe"),
                            CategoryId = new Guid("edc3c4d0-b53f-4538-ae3e-edb18ee22430"),
                            Name = "LogTech G12",
                            PriceInUAH = 1000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            Id = new Guid("c51445e0-81f7-413a-b551-a1b7df501cdb"),
                            CategoryId = new Guid("edc3c4d0-b53f-4538-ae3e-edb18ee22430"),
                            Name = "X7",
                            PriceInUAH = 2000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            Id = new Guid("19d11ccf-0e55-43b0-a0db-d1717ed152c9"),
                            CategoryId = new Guid("abe915e8-e84c-46cc-83a7-ba5dee415768"),
                            Name = "HP 450 G1",
                            PriceInUAH = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            Id = new Guid("77451d49-5f1b-4053-a502-1f6c3fa907ba"),
                            CategoryId = new Guid("abe915e8-e84c-46cc-83a7-ba5dee415768"),
                            Name = "HP 450 G1",
                            PriceInUAH = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            Id = new Guid("9456a73e-4c38-4079-ba21-e57abfd436f5"),
                            CategoryId = new Guid("abe915e8-e84c-46cc-83a7-ba5dee415768"),
                            Name = "HP 450 G1",
                            PriceInUAH = 20000.0,
                            ProductStatus = 0
                        },
                        new
                        {
                            Id = new Guid("a52ff1e9-52db-4188-bae5-d684b5b8e4ef"),
                            CategoryId = new Guid("abe915e8-e84c-46cc-83a7-ba5dee415768"),
                            Name = "HP 450 G1",
                            PriceInUAH = 20000.0,
                            ProductStatus = 0
                        });
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.PurchaseDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("PriceAtPurchaseMoment")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreCategoryDbModel", b =>
                {
                    b.Property<Guid>("StoreDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StoreDbModelId", "CategoryDbModelId");

                    b.HasIndex("CategoryDbModelId");

                    b.ToTable("StoreCategoryRelation");

                    b.HasData(
                        new
                        {
                            StoreDbModelId = new Guid("116d45fc-8bce-4d86-8030-879b8b4cf8c9"),
                            CategoryDbModelId = new Guid("abe915e8-e84c-46cc-83a7-ba5dee415768")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("116d45fc-8bce-4d86-8030-879b8b4cf8c9"),
                            CategoryDbModelId = new Guid("edc3c4d0-b53f-4538-ae3e-edb18ee22430")
                        });
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Profit")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MallId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("116d45fc-8bce-4d86-8030-879b8b4cf8c9"),
                            Location = "10 Pandora Street",
                            MallId = new Guid("9c1d5b26-d398-44d0-87fa-838dc45028f1"),
                            Name = "Shields and Weapons",
                            Profit = 0.0
                        });
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreProductDbModel", b =>
                {
                    b.Property<Guid>("StoreDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductDbModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StoreDbModelId", "ProductDbModelId");

                    b.HasIndex("ProductDbModelId");

                    b.ToTable("StoreProductRelation");

                    b.HasData(
                        new
                        {
                            StoreDbModelId = new Guid("116d45fc-8bce-4d86-8030-879b8b4cf8c9"),
                            ProductDbModelId = new Guid("57042385-800e-42ff-b197-faac94f79a6b")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("116d45fc-8bce-4d86-8030-879b8b4cf8c9"),
                            ProductDbModelId = new Guid("19d11ccf-0e55-43b0-a0db-d1717ed152c9")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("116d45fc-8bce-4d86-8030-879b8b4cf8c9"),
                            ProductDbModelId = new Guid("77451d49-5f1b-4053-a502-1f6c3fa907ba")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("116d45fc-8bce-4d86-8030-879b8b4cf8c9"),
                            ProductDbModelId = new Guid("9456a73e-4c38-4079-ba21-e57abfd436f5")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("116d45fc-8bce-4d86-8030-879b8b4cf8c9"),
                            ProductDbModelId = new Guid("a52ff1e9-52db-4188-bae5-d684b5b8e4ef")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("116d45fc-8bce-4d86-8030-879b8b4cf8c9"),
                            ProductDbModelId = new Guid("162121d0-2ca7-429f-92ea-0cbc814f1c08")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("116d45fc-8bce-4d86-8030-879b8b4cf8c9"),
                            ProductDbModelId = new Guid("512f3ad8-b3b2-4d0a-8c2c-53944af85656")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("116d45fc-8bce-4d86-8030-879b8b4cf8c9"),
                            ProductDbModelId = new Guid("45a2a0ab-5e24-47ce-8bb1-c0d1ca804bc6")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("116d45fc-8bce-4d86-8030-879b8b4cf8c9"),
                            ProductDbModelId = new Guid("fae7ed00-ca83-4b2c-a236-f992a8a13191")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("116d45fc-8bce-4d86-8030-879b8b4cf8c9"),
                            ProductDbModelId = new Guid("042616f7-1f8b-43a0-b322-96559c2980fe")
                        },
                        new
                        {
                            StoreDbModelId = new Guid("116d45fc-8bce-4d86-8030-879b8b4cf8c9"),
                            ProductDbModelId = new Guid("c51445e0-81f7-413a-b551-a1b7df501cdb")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.ReliableClientDbModel", b =>
                {
                    b.HasBaseType("ChainStore.DataAccessLayerImpl.DbModels.ClientDbModel");

                    b.Property<double>("CashBack")
                        .HasColumnType("float");

                    b.Property<int>("CashBackPercent")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ReliableClientDbModel");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.VipClientDbModel", b =>
                {
                    b.HasBaseType("ChainStore.DataAccessLayerImpl.DbModels.ReliableClientDbModel");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<double>("Points")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("VipClientDbModel");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.CategoryDbModel", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.StoreDbModel", null)
                        .WithMany("CategoryDbModels")
                        .HasForeignKey("StoreDbModelId");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.ProductDbModel", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.CategoryDbModel", "CategoryDbModel")
                        .WithMany("ProductDbModels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreCategoryDbModel", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.CategoryDbModel", "CategoryDbModel")
                        .WithMany("StoreCategoryRelation")
                        .HasForeignKey("CategoryDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.StoreDbModel", "StoreDbModel")
                        .WithMany("StoreCategoryRelation")
                        .HasForeignKey("StoreDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreDbModel", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.MallDbModel", "MallDbModel")
                        .WithMany("StoreDbModels")
                        .HasForeignKey("MallId");
                });

            modelBuilder.Entity("ChainStore.DataAccessLayerImpl.DbModels.StoreProductDbModel", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.ProductDbModel", "ProductDbModel")
                        .WithMany("StoreProductRelation")
                        .HasForeignKey("ProductDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChainStore.DataAccessLayerImpl.DbModels.StoreDbModel", "StoreDbModel")
                        .WithMany("StoreProductRelation")
                        .HasForeignKey("StoreDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChainStore.DataAccessLayerImpl.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ChainStore.DataAccessLayerImpl.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
